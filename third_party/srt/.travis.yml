language: cpp
dist: xenial

addons:
    apt:
        packages:
        - tclsh
        - pkg-config
        - cmake
        - libssl-dev
        - build-essential
        - libmbedtls-dev
        - gdb
    sonarcloud:
        organization: "haivision"
        token:
            secure: "wJZC0kyyjuf4SZyonZ6p/5Ga9asEqSnKWF9NpRbu6S6ceERO7vbebuSJF5qX3A6ivPuw0TTk5WASOdnvIyfA28FU/D0MWRdH8K7T3w77wdE9EgAEYTUXzdrbzJY18+9pxjljHwWXWALPSGf3MClg4irWrdk1e6uHK+68R39+ZvBGBFpWeeZy/+at9+xwhtAGKBlSHe8zc+3wPxuYdvviLVJ25qbpNmnzkUR0X89G+UBl90raCPSN32EHFdImHZ5DxfEQQJgZFRjzQUY4EW/iYwaMel7jufAq0ClgV4psKujl9Lz8cPqx3WgqRfJyiIthOMTsac7G4zAw8LK2CI0VsssBp0JalLXaumi6vG7o6c3rIwKckzSKccq3pHa7h45praIVVn9s3nq+Q/JGA11FMkKQxdQtmwgFsLhbi6ZxabgsUi5KtWoWY2z6MgpJuROuAjNxZi9XJzUoJs7zSTUtRRW7V8Q2lRiOnknYh25N6TCA5bpyy1EZmRdJErm071YNI9P01gbFz5137FWJFiJzro9TGF0KoHSGiCIdUt3WlMzwr/i/wFLxFBQOZQ2rjTXvhs4hxONxMZV3gzxA1NdLaf9i5Mh6jxVMV+ujaRSV7JmPGzxqiAlpT9cJUhTCYuar9diLLeDrpe7RawEZR8V1xVDQ7yT8ruDNQ78VbSn/sC0="
    homebrew:
        update: false
        packages:
        - openssl

matrix:
    include:
        - os: linux
          env:
          - BUILD_TYPE=Debug
          - BUILD_OPTS='-DENABLE_CODE_COVERAGE=ON -DENABLE_BONDING=ON -DCMAKE_CXX_FLAGS="-Werror"'
          - RUN_SONARCUBE=1
          - RUN_CODECOV=1
        - env:
          - BUILD_TYPE=Debug
          - BUILD_OPTS='-DENABLE_LOGGING=OFF -DUSE_ENCLIB=mbedtls -DENABLE_MONOTONIC_CLOCK=ON -DENABLE_BONDING=ON -DCMAKE_CXX_FLAGS="-Werror"'
        - os: linux
          env: BUILD_TYPE=Release
        - os: osx
          osx_image: xcode11.1
          env:
          - BUILD_TYPE=Debug
          - BUILD_OPTS='-DCMAKE_CXX_FLAGS="-Werror"'
        - os: osx
          osx_image: xcode11.1
          env:
          - BUILD_TYPE=Release
          - BUILD_OPTS='-DCMAKE_CXX_FLAGS="-Werror"'
        - os: linux
          compiler: x86_64-w64-mingw32-g++
          addons:
            apt:
              packages:
                - gcc-mingw-w64-base
                - binutils-mingw-w64-x86-64
                - gcc-mingw-w64-x86-64
                - gcc-mingw-w64
                - g++-mingw-w64-x86-64
          before_script:
            - git clone -b OpenSSL_1_1_1g https://github.com/openssl/openssl.git openssl
            - cd openssl
            - ./Configure --cross-compile-prefix=x86_64-w64-mingw32- mingw64
            - make
            - cd ..
          env: BUILD_TYPE=Release

         # Power jobs
        - os: linux
          arch: ppc64le
          env:
          - BUILD_TYPE=Debug
        - arch: ppc64le
          env:
          - BUILD_TYPE=Release
          - BUILD_OPTS='-DENABLE_MONOTONIC_CLOCK=ON'
script:
    - TESTS_IPv6="TestMuxer.IPv4_and_IPv6:TestIPv6.v6_calls_v6*:ReuseAddr.ProtocolVersion:ReuseAddr.*6" ; # Tests to skip due to lack of IPv6 support
    - if [ "$TRAVIS_COMPILER" == "x86_64-w64-mingw32-g++" ]; then
        export CC="x86_64-w64-mingw32-gcc";
        export CXX="x86_64-w64-mingw32-g++";
        cmake . -DCMAKE_BUILD_TYPE=$BUILD_TYPE $BUILD_OPTS -DENABLE_UNITTESTS="OFF" -DUSE_OPENSSL_PC="OFF" -DOPENSSL_ROOT_DIR="$PWD/openssl" -DCMAKE_SYSTEM_NAME="Windows";
      elif [ "$TRAVIS_OS_NAME" == "linux" ]; then
        cmake . -DCMAKE_BUILD_TYPE=$BUILD_TYPE $BUILD_OPTS -DENABLE_UNITTESTS="ON";
      elif [ "$TRAVIS_OS_NAME" == "osx" ]; then
        export PKG_CONFIG_PATH=$(brew --prefix openssl)"/lib/pkgconfig";
        cmake . -DCMAKE_BUILD_TYPE=$BUILD_TYPE $BUILD_OPTS -DENABLE_UNITTESTS="ON";
      fi
    - echo "TRAVIS_REPO_SLUG=$TRAVIS_REPO_SLUG"
    - echo "TRAVIS_PULL_REQUEST=$TRAVIS_PULL_REQUEST"
    - if [[ "$TRAVIS_REPO_SLUG" != "Haivision/srt" || "$TRAVIS_PULL_REQUEST" -gt 0 ]]; then
        export RUN_SONARCUBE=0;
      fi
    - echo "RUN_SONARCUBE=$RUN_SONARCUBE"
    - if (( "$RUN_SONARCUBE" )); then
        build-wrapper-linux-x86-64 --out-dir bw-output make;
      else
        make -j$(nproc);
      fi
    - if [ "$TRAVIS_COMPILER" != "x86_64-w64-mingw32-g++" ]; then
        ulimit -c unlimited;
        ./test-srt --gtest_filter="-$TESTS_IPv6";
        SUCCESS=$?;
        if [ -f core ]; then gdb -batch ./test-srt -c core -ex bt -ex "info thread" -ex quit; else echo "NO CORE - NO CRY!"; fi;
        test $SUCCESS == 0;
      fi
after_success:
    - if (( "$RUN_CODECOV" )); then
        source ./scripts/collect-gcov.sh;
        bash <(curl -s https://codecov.io/bash);
      fi
    - if (( "$RUN_SONARCUBE" )); then
        sonar-scanner -D"sonar.cfamily.gcov.reportPath=.";
      fi
